# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DA-cpu2SX1JacMpn5MkHzOWYfblelUqQ
"""

#!/usr/bin/env python
# coding: utf-8
import re
import pandas as pd
import numpy as np

class EQUATION:
  vars = []
  vars_VP = []
  vars_VT = []
  names = []

  def __init__(self, name, l, r):
    self.name = name
    self.vars_VT = l
    self.vars_VP = r

  #Tổng số chất đang có bên vế trái
  def getNumVar(self): 
    return len(self.vars_VT)

class STEP:
    var_value = -1
    equation = -1
    def __init__(self, var, equation):
      self.var_value = var
      self.equation = equation

class PROBLEM:
  equations = []  # lưu các tri thức (các phương trình)
  knownVar =[] # lưu các hóa chất đã biết
  unknownVar =-1 # hóa chất cần điều chế
  steps = [] # lưu các bước giải bài toán

  def clear(self):
    self.knownVar.clear()
    self.unknownVar.clear()
    self.steps.clear()
    self.unknownVar = -1

  #Cài đặt hóa chất nào đã biết
  def setUnknownVar(self, var):
    self.unknownVar = var

  #Cài đặt hóa chất nào chưa biết
  def setKnownVars(self, vars):
    self.knownVars = vars

  #Thêm tri thức (phương trình) vào bài toán
  def addEquation(self, equations):
    self.equations = equations

  #Số lượng hóa chất đã biết (chỉ tính bên vế trái phương trình)
  def getNumKnownVar(self, equation):
    count = 0
    for var in equation.vars_VT:
      #print(var)
      if (var in self.knownVars):
        count+=1
    return count

  #Trả về yếu tố chưa biết trong phương trình
  def getUnknownVar(self, equation):
    for var in equation.vars_VP:
      if (var not in self.knownVars):
        return var
  
  #Trả về các hóa chát có thể điều chế được, trả về kết quả điều chế
  def getKnownVar(self, equation):
    #print(self.getNumKnownVar(equation))
    if ((self.getNumKnownVar(equation) == equation.getNumVar())):
      return equation.vars_VP
    return -1
  
  #Kích hoạt hóa chất nào có thể điều chế
  def activeVar(self, knownVar):
    for var in knownVar:
      self.knownVars.append(var)
    #print(self.knownVars)

  #Thêm bước giải
  def addStep(self, var, equation):
    self.steps.append((var, equation))

  #Kiểm tra điều chế thành công chưa?
  def isSuccess(self):
    if (self.unknownVar in self.knownVars):
      return True
    return False

  #Giải bài toán
  def solve(self):
    flag = True
    while (flag):
      flag = False
      for equation in self.equations:
        knownVar = self.getKnownVar(equation)
        #print(knownVar)
        if (knownVar != -1):
          self.activeVar(knownVar)
          self.addStep(knownVar, equation)
          flag = True
          if (self.isSuccess()):
            temp = []
            solutions = temp
            for step in self.steps:
              solutions.append(step)
            return [True, solutions]
      return [False,"bài toán không thể giải, hãy bổ sung thêm thông tin hoặc tri thức"]

# data = pd.read_csv(r"https://raw.githubusercontent.com/NuDinh/RK/main/bai3/phuongtrinh.txt",sep='=',header= None)
# data.columns = ['knownVar','unknownVar']

# #remove white space
# data['knownVar'] = data['knownVar'].apply(lambda x: re.sub('\s+','',x))
# data['unknownVar'] = data['unknownVar'].apply(lambda x: re.sub('\s+','',x))
# #split
# data['knownVar'] = data.knownVar.apply(lambda x: re.split('\+', x))
# data['unknownVar'] = data.unknownVar.apply(lambda x: re.split('\+', x))

# hàm đọc file
def equation_list():
  file = input('Nhap ten file: ')
  data = pd.read_csv(file, sep="=", header=None, names=['VT','VP'])
  #remove spaces
  data['VT'] = data['VT'].apply(lambda x: re.sub('\s+','',x))
  data['VP'] = data['VP'].apply(lambda x: re.sub('\s+','',x))
  eqList = []
  for i in range(len(data)):
    for col in data.columns:
      m = []
      s = re.split('\+',data.loc[i,col])
      for a in range(len(s)):
        m.append(re.sub('^(\d)+','',s[a]))
        data.loc[i,col] = m
  return data

if __name__ == "__main__":
    eqList = []
    data = equation_list()
    for i in (data.index.values):
      eq = EQUATION("CT" + str(i+1), data.loc[i][0], data.loc[i][1])
      eqList.append(eq) 
    
    problem = PROBLEM()
    problem.addEquation(eqList)

    givenChems = input("nguyen lieu dau vao: ").strip().split(",")
    #givenChems = ["S", "O_2", "H_2O"]  
    problem.setKnownVars(givenChems)
    #print(givenChems)

    toBeRefinedChems = input("hoa chat can dieu che: ").strip().split(",")
    #toBeRefinedChems = ["H_2SO_4"]
    #print(toBeRefinedChems)

    solutions = []
    for chemistry in toBeRefinedChems:
      problem.setUnknownVar(chemistry)
      solutions.append(problem.solve())

    
    for i, solution in enumerate(solutions):
        print(f"Ta cần điều chế {toBeRefinedChems[i]}")
        if solution[0] == True:
            for index, step in enumerate(solution[1]):
                print(f"Điều chế lần {index+1}")
                print(f"Ta điều chế được {step[1].vars_VP} thông qua {step[1].name}")
                print(f"{step[1].vars_VT} => {step[1].vars_VP}")
                print("\n")
        else:
            print(solution[1])

data



