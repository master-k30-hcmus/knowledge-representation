# -*- coding: utf-8 -*-
"""BDTT - Bai2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NnLk_isWSmoCcncWlkf3oKH4Lues-Gku
"""


class EQUATION:
    vars = []
    vars_VP = []
    vars_VT = []
    names = []

    def __init__(self, name, *vars):
        self.name = name
        temp = []
        for var in vars:
            temp.append(var)
        self.vars = temp
        self.vars_VT = self.vars[0]
        self.vars_VP = self.vars[1]

    # Tổng số chất đang có bên vế trái
    def getNumVar(self):
        return len(self.vars_VT)


class STEP:
    var_value = -1
    equation = -1

    def __init__(self, var, equation):
        self.var_value = var
        self.equation = equation


class PROBLEM:
    equations = []  # lưu các tri thức (các phương trình)
    knownVar = []  # lưu các hóa chất đã biết
    unknownVar = -1  # hóa chất cần điều chế
    steps = []  # lưu các bước giải bài toán

    def clear(self):
        self.knownVar.clear()
        self.unknownVar.clear()
        self.steps.clear()
        self.unknownVar = -1

    # Cài đặt hóa chất nào đã biết
    def setUnknownVar(self, var):
        self.unknownVar = var

    # Cài đặt hóa chất nào chưa biết
    def setKnownVars(self, *vars):
        self.knownVars = []
        for var in vars:
            self.knownVars.append(var)

    # Thêm tri thức (phương trình) vào bài toán
    def addEquation(self, *equations):
        self.equations = []
        for equation in equations:
            self.equations.append(equation)
        # print(self.equations)

    # Số lượng hóa chất đã biết (chỉ tính bên vế trái phương trình)
    def getNumKnownVar(self, equation):
        count = 0
        for var in equation.vars_VT:
            # print(var)
            if (var in self.knownVars):
                count += 1
        return count

    # Trả về yếu tố chưa biết trong phương trình
    def getUnknownVar(self, equation):
        for var in equation.vars_VP:
            if (var not in self.knownVars):
                return var

    # Trả về các hóa chát có thể điều chế được, trả về kết quả điều chế
    def getKnownVar(self, equation):
        # print(self.getNumKnownVar(equation))
        if ((self.getNumKnownVar(equation) == equation.getNumVar())):
            return equation.vars_VP
        return -1

    # Kích hoạt hóa chất nào có thể điều chế
    def activeVar(self, knownVar):
        for var in knownVar:
            self.knownVars.append(var)
        # print(self.knownVars)

    # Thêm bước giải
    def addStep(self, var, equation):
        self.steps.append((var, equation))

    # Kiểm tra điều chế thành công chưa?
    def isSuccess(self):
        if (self.unknownVar in self.knownVars):
            return True
        return False

    # Giải bài toán
    def slove(self):
        flag = True
        while (flag):
            flag = False
            for equation in self.equations:
                knownVar = self.getKnownVar(equation)
                # print(knownVar)
                if (knownVar != -1):
                    self.activeVar(knownVar)
                    self.addStep(knownVar, equation)
                    flag = True
                    if (self.isSuccess()):
                        temp = []
                        solutions = temp
                        for step in self.steps:
                            solutions.append(step)
                        return solutions
        return ["bài toán không thể giải, hãy bổ sung thêm thông tin hoặc tri thức"]


def process():
    # define names
    chemistry_1 = "Na"
    chemistry_2 = "Cl_2"
    chemistry_3 = "NaCl"
    chemistry_4 = "Cu"
    chemistry_5 = "CuCl_2"
    chemistry_6 = "H_2O"
    chemistry_7 = "HCl"
    chemistry_8 = "HClO"
    chemistry_9 = "MnO_2"
    chemistry_10 = "MnCl_2"
    chemistry_11 = "KMnO_4"
    chemistry_12 = "KCl"
    chemistry_13 = "H_2"
    chemistry_14 = "NaOH"
    chemistry_15 = "K"
    chemistry_16 = "Fe"
    chemistry_17 = "FeCl_3"
    # define equation
    Eq_1 = EQUATION("công thuc 1", [chemistry_1, chemistry_2], [chemistry_3])
    Eq_2 = EQUATION("công thuc 2", [chemistry_16, chemistry_2], [chemistry_17])
    Eq_3 = EQUATION("công thuc 3", [chemistry_4, chemistry_2], [chemistry_5])
    Eq_4 = EQUATION("công thuc 4", [chemistry_2, chemistry_6], [chemistry_7, chemistry_8])
    Eq_5 = EQUATION("công thuc 5", [chemistry_9, chemistry_7], [chemistry_10, chemistry_2, chemistry_6])
    Eq_6 = EQUATION("công thuc 6", [chemistry_7, chemistry_11], [chemistry_12, chemistry_10, chemistry_6, chemistry_2])
    Eq_7 = EQUATION("công thuc 7", [chemistry_3, chemistry_6], [chemistry_2, chemistry_13, chemistry_14])
    Eq_8 = EQUATION("công thuc 8", [chemistry_15, chemistry_2], [chemistry_12])

    problem = PROBLEM()

    problem.addEquation(Eq_1, Eq_2, Eq_3, Eq_4, Eq_5, Eq_6, Eq_7, Eq_8)
    problem.setKnownVars(chemistry_1, chemistry_2, chemistry_6)
    unKnownChemistry = [chemistry_14]
    solutions = []
    for chemistry in unKnownChemistry:
        problem.setUnknownVar(chemistry)
        solutions.append(problem.slove())

    return solutions

